package simpleGame.core;

//It is recommended to import Mockito statically so that the code looks clearer
import static org.mockito.Mockito.*;

//Eclipse might not find this one automatically:
import org.mockito.runners.MockitoJUnitRunner;

import simpleGame.core.Board;
import simpleGame.core.Direction;
import simpleGame.core.Pawn;
import simpleGame.exception.OutOfBoardException;

import static org.junit.Assert.*;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(MockitoJUnitRunner.class) // This is required for mocks to work
public class TestPawn {

	@Test
	public void getTest() {
		//Mock d'un board
		Board mockBoard = mock(Board.class);
		
		Pawn myPawn = new Pawn('l', 2, 4, mockBoard);
		
		assertEquals(2, myPawn.getX());
		assertEquals(4, myPawn.getY());
		assertEquals('l', myPawn.getLetter());
		assertEquals(0, myPawn.getGold());        
    }

	@Test
    public void moveTest() throws OutOfBoardException{
				
		//Mock d'un board
		Board mockBoard = mock(Board.class);
        when(mockBoard.getXSize()).thenReturn(4);
        when(mockBoard.getYSize()).thenReturn(4);
        		
		Pawn myPawn = new Pawn('l', 1, 3, mockBoard);
		
		myPawn.move(Direction.Right);
		assertEquals(2, myPawn.getX());
		
		myPawn.move(Direction.Down);
		assertEquals(2, myPawn.getY());
		
		myPawn.move(Direction.Left);
		assertEquals(1, myPawn.getX());
		
		myPawn.move(Direction.Up);
		assertEquals(3, myPawn.getY());
}

	@Test
    public void isDeadTest() {
		//Mock d'un board
		Board mockBoard = mock(Board.class);
        when(mockBoard.getXSize()).thenReturn(4);
        when(mockBoard.getYSize()).thenReturn(4);
        when(mockBoard.isBonusSquare(2,2)).thenReturn(true);
        		
		Pawn myPawn1 = new Pawn('l', 2, 2, mockBoard);
		Pawn myPawn2 = new Pawn('l', 1, 2, mockBoard);
		myPawn2.move(Direction.Right);
		
		assertTrue(myPawn1.isDead());
    }
}
